import io
import re
import traceback
import sys
import json
import os


def extract_python_code(text):
    code_block = re.findall(r"```python(.*)```", text, re.DOTALL)

    if code_block:
        cleaned_code = code_block[0].strip().strip('"""')
        return cleaned_code
    return None


def store_dataframe_info(df):
    buffer = io.StringIO()
    df.info(buf=buffer)
    return buffer.getvalue()


def filter_json_schema(json_schema, filter):
    """
    Retrieves the snippet of the json schema to be used as a reference for
    generating data analysis code
    """
    keys = filter.split("::")
    for key in keys:
        try:
            json_schema = json_schema["properties"]
        except KeyError:
            try:
                json_schema = json_schema["patternProperties"]
            except KeyError:
                pass
        json_schema = json_schema[key]
    return json_schema


# Temporary
def retrieve_data(event):
    """
    Temporary function in place of API response from EODHD
    """
    file_path = os.path.join(os.path.dirname(__file__), "CBA.json")

    with open(file_path, "r") as file:
        data = json.load(file)
    keys = event["data_filter"].split("::")
    for key in keys:
        data = data[key]
    return data


def capture_parse_output(result):
    if result.startswith("a:"):
        parsed_result = json.loads(result[2:])
        return {
            "toolName": parsed_result["toolName"],
            "output": parsed_result["result"]["output"],
        }
    return None


def capture_output_temp(result):
    if result.startswith("a:"):
        parsed_result = json.loads(result[2:])
        return {
            "toolName": parsed_result["toolName"],
            "output": parsed_result["result"],
        }
    return None


def capture_output(result):
    if result.startswith("0:"):
        return result[2:]
    return None


def execute_code_with_fallback(
    code_generator_func, *args, max_attempts=3, global_data=None, **kwargs
):
    """
    Executes code generated by a provided code generation function.
    Accepts a variable number of positional and keyword arguments that are passed to the code generation function.
    If an error occurs, it passes the error back into the code generation
    function for refinement and retries the execution.
    """

    output = None

    event = code_generator_func(*args, **kwargs)
    for result in event:
        yield result
        output = capture_parse_output(result) if output is None else output

    attempts = 0

    while attempts < max_attempts:
        try:
            global_vars = globals()

            if global_data:
                global_vars["data"] = global_data

            if "code" in output:
                code = output["code"]
            elif extract_python_code(output):
                code = extract_python_code(output)
            else:
                code = output

            try:
                exec(code, global_vars)
            except Exception as exec_error:
                tb = sys.exc_info()[2]
                extracted_tb = traceback.extract_tb(tb)
                for frame in extracted_tb:
                    if frame.filename == "<string>":
                        print(
                            f"Error in dynamically executed code at line {frame.lineno}:\n{frame.line}"
                        )
                raise exec_error  # Re-raise the error to be caught by the outer try-except

            if "df" in global_vars:
                print("Code executed successfully")
                break
            else:
                raise NameError(
                    "The variable 'df' was not created in the generated code."
                )

        except Exception as e:
            error_traceback = traceback.format_exc()
            print(f"Attempt {attempts + 1} failed. Error:\n{error_traceback}")

            attempts += 1

            if attempts >= max_attempts:
                print(f"Max attempts reached ({max_attempts}).")
                raise RuntimeError(
                    f"Failed to execute code after {max_attempts} attempts."
                )

            error_message = {
                "role": "user",
                "content": f"The following error occurred while executing the code:\n{error_traceback}",
            }

            event = code_generator_func(*args, retry_messages=[error_message], **kwargs)
            output = None
            for result in event:
                yield result
                output = (
                    capture_parse_output(result)["output"] if output is None else output
                )
